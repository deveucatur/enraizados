import streamlit as st
from database import Adolescente, Presenca, Evento, Visitante, session
import pandas as pd
import plotly.express as px
import datetime
from datetime import datetime
from sqlalchemy import func

st.set_page_config(page_title="Dashboard", page_icon="ğŸ“Š", layout="wide")
st.header("ğŸ“Š Dashboard Interativo")

# Filtro por mÃªs e ano (movido para o corpo principal)
st.subheader("Filtros")
col1, col2 = st.columns(2)

from datetime import datetime

mes_atual = datetime.now().month
ano_atual = datetime.now().year

with col1:
    mes = st.selectbox(
        "Selecione o MÃªs",
        list(range(1, 13)),
        format_func=lambda x: datetime(1900, x, 1).strftime('%B'),
        index=mes_atual - 1
    )
with col2:
    anos_disponiveis = [ano_atual, ano_atual - 1]
    ano = st.selectbox(
        "Selecione o Ano",
        anos_disponiveis,
        index=0
    )

# Data inicial e final do filtro
data_inicio = datetime.date(ano, mes, 1)
if mes == 12:
    data_fim = datetime.date(ano + 1, 1, 1)
else:
    data_fim = datetime.date(ano, mes + 1, 1)


# Dados Filtrados
eventos_filtrados = session.query(Evento).filter(Evento.data >= data_inicio, Evento.data < data_fim).all()
eventos_ids = [evento.id for evento in eventos_filtrados]

presencas_filtradas = session.query(Presenca).filter(Presenca.evento_id.in_(eventos_ids)).all()

# Total de Adolescentes
total_adolescentes = session.query(Adolescente).count()

# Total de Eventos no MÃªs
total_eventos = len(eventos_filtrados)

# PresenÃ§a MÃ©dia no MÃªs
if total_eventos > 0:
    presencas_totais = sum(1 for p in presencas_filtradas if p.presente)
    media_presencas = presencas_totais / total_eventos
else:
    media_presencas = 0

# Visitantes no MÃªs
visitantes_mes = session.query(Visitante).filter(Visitante.evento_id.in_(eventos_ids)).count()

# MÃ©tricas
col1, col2, col3, col4 = st.columns(4)
col1.metric("Total de Adolescentes", total_adolescentes)
col2.metric("Eventos no MÃªs", total_eventos)
col3.metric("PresenÃ§a MÃ©dia por Evento", f"{media_presencas:.1f}")
col4.metric("Visitantes no MÃªs", visitantes_mes)

# GrÃ¡fico de PresenÃ§as por Evento
st.subheader("PresenÃ§as por Evento")
dados_presencas = []
for evento in eventos_filtrados:
    presencas_evento = session.query(Presenca).filter_by(evento_id=evento.id).all()
    total_presentes = sum(1 for p in presencas_evento if p.presente)
    total_ausentes = sum(1 for p in presencas_evento if not p.presente)
    dados_presencas.append({
        'Evento': f"{evento.nome} ({evento.data.strftime('%d/%m')})",
        'Presentes': total_presentes,
        'Ausentes': total_ausentes
    })

df_presencas = pd.DataFrame(dados_presencas)

if not df_presencas.empty:
    fig = px.bar(
        df_presencas,
        x='Evento',
        y=['Presentes', 'Ausentes'],
        title="PresenÃ§as e AusÃªncias por Evento",
        labels={'value': 'Quantidade', 'variable': 'Status'}
    )
    st.plotly_chart(fig, use_container_width=True)
else:
    st.info("NÃ£o hÃ¡ dados de presenÃ§as para o perÃ­odo selecionado.")

# GrÃ¡fico de FrequÃªncia por Adolescente
st.subheader("FrequÃªncia dos Adolescentes no MÃªs")
frequencia = {}
for presenca in presencas_filtradas:
    if presenca.adolescente_id not in frequencia:
        frequencia[presenca.adolescente_id] = {'PresenÃ§as': 0, 'AusÃªncias': 0}
    if presenca.presente:
        frequencia[presenca.adolescente_id]['PresenÃ§as'] += 1
    else:
        frequencia[presenca.adolescente_id]['AusÃªncias'] += 1

dados_frequencia = []
for adolescente_id, freq in frequencia.items():
    adolescente = session.query(Adolescente).filter_by(id=adolescente_id).first()
    total_presencas = freq['PresenÃ§as']
    total_ausencias = freq['AusÃªncias']
    dados_frequencia.append({
        'Nome': adolescente.nome,
        'PresenÃ§as': total_presencas,
        'AusÃªncias': total_ausencias
    })

df_frequencia = pd.DataFrame(dados_frequencia)

if not df_frequencia.empty:
    fig = px.bar(
        df_frequencia.sort_values('PresenÃ§as', ascending=False),
        x='Nome',
        y=['PresenÃ§as', 'AusÃªncias'],
        title="FrequÃªncia de PresenÃ§a por Adolescente",
        labels={'value': 'Quantidade', 'variable': 'Status'}
    )
    st.plotly_chart(fig, use_container_width=True)
else:
    st.info("NÃ£o hÃ¡ dados de frequÃªncia para o perÃ­odo selecionado.")

# Visitantes por Evento
st.subheader("Visitantes por Evento")
dados_visitantes = []
for evento in eventos_filtrados:
    visitantes_evento = session.query(Visitante).filter_by(evento_id=evento.id).count()
    dados_visitantes.append({
        'Evento': f"{evento.nome} ({evento.data.strftime('%d/%m')})",
        'Visitantes': visitantes_evento
    })

df_visitantes = pd.DataFrame(dados_visitantes)

if not df_visitantes.empty:
    fig = px.bar(
        df_visitantes,
        x='Evento',
        y='Visitantes',
        title="NÃºmero de Visitantes por Evento",
        labels={'Visitantes': 'Quantidade'}
    )
    st.plotly_chart(fig, use_container_width=True)
else:
    st.info("NÃ£o hÃ¡ dados de visitantes para o perÃ­odo selecionado.")

# EstilizaÃ§Ã£o
st.markdown("""
    <style>
        .css-18e3th9 {
            padding-top: 1rem;
        }
        .css-1d391kg {
            padding-top: 1rem;
        }
        .css-1lcbmhc {
            padding-top: 1rem;
        }
    </style>
    """, unsafe_allow_html=True)
